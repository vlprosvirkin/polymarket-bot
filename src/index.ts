import dotenv from 'dotenv';
import { WalletService } from './services/WalletService';
import { PolymarketService } from './services/PolymarketService';
import { POLYMARKET_CONSTANTS } from './utils/constants';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class PolymarketBot {
  private walletService: WalletService;
  private polymarketService: PolymarketService;

  constructor() {
    try {
      this.walletService = new WalletService();
      this.polymarketService = new PolymarketService(this.walletService);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  async initialize(): Promise<void> {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Polymarket Bot...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
      const isConnected = await this.walletService.checkConnection();
      if (!isConnected) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
      const networkInfo = await this.walletService.getNetworkInfo();
      console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏: ${networkInfo.name} (Chain ID: ${networkInfo.chainId})`);

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      const walletAddress = this.walletService.getAddress();
      console.log(`üí∞ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}`);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å ETH
      const ethBalance = await this.walletService.getBalance();
      console.log(`üíé –ë–∞–ª–∞–Ω—Å ETH: ${ethBalance}`);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDC
      const usdcBalance = await this.polymarketService.getCollateralBalance();
      console.log(`üíµ –ë–∞–ª–∞–Ω—Å USDC: ${usdcBalance}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
      const contractAddresses = this.polymarketService.getContractAddresses();
      console.log('üìã –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:');
      console.log(`   ConditionalTokens: ${contractAddresses.conditionalTokens}`);
      console.log(`   CollateralToken: ${contractAddresses.collateralToken}`);

      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
   */
  async getWalletInfo(): Promise<void> {
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:');
    
    const address = this.walletService.getAddress();
    const ethBalance = await this.walletService.getBalance();
    const usdcBalance = await this.polymarketService.getCollateralBalance();
    const allowance = await this.polymarketService.getCollateralAllowance();
    
    console.log(`   –ê–¥—Ä–µ—Å: ${address}`);
    console.log(`   ETH: ${ethBalance}`);
    console.log(`   USDC: ${usdcBalance}`);
    console.log(`   Allowance: ${allowance}`);
  }

  /**
   * –û–¥–æ–±—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ USDC
   */
  async approveUSDC(amount: string): Promise<void> {
    console.log(`\nüîê –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è ${amount} USDC...`);
    
    try {
      const tx = await this.polymarketService.approveCollateral(amount);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);
      
      const receipt = await tx.wait();
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ: ${receipt?.blockNumber}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
   */
  async checkApprovalStatus(): Promise<void> {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è...');
    
    const allowance = await this.polymarketService.getCollateralAllowance();
    console.log(`   –¢–µ–∫—É—â–∏–π allowance: ${allowance} USDC`);
    
    if (parseFloat(allowance) > 0) {
      console.log('‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  –û–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
   */
  async demonstratePositionOperations(): Promise<void> {
    console.log('\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–∑–∏—Ü–∏—è–º–∏...');
    
    // –ü—Ä–∏–º–µ—Ä condition ID (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ API Polymarket)
    const exampleConditionId = '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';
    const outcomeIndex = 0;
    
    try {
      const positionBalance = await this.polymarketService.getPositionBalance(
        exampleConditionId,
        outcomeIndex
      );
      
      console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ–∑–∏—Ü–∏–∏: ${positionBalance}`);
      
    } catch (error) {
      console.log('   –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)');
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async run(): Promise<void> {
    try {
      await this.initialize();
      await this.getWalletInfo();
      await this.checkApprovalStatus();
      await this.demonstratePositionOperations();
      
      console.log('\nüéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket');
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main(): Promise<void> {
  const bot = new PolymarketBot();
  await bot.run();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  });
}

export { PolymarketBot };
