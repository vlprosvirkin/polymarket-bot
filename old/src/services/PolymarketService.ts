import { ethers } from 'ethers';
import { ClobClient, AssetType } from '@polymarket/clob-client';
import { WalletService } from './WalletService';
import { POLYMARKET_CONSTANTS } from '../utils/constants';

export class PolymarketService {
  private walletService: WalletService;
  private clobClient!: ClobClient;
  private contractAddresses: any;
  private config: any;

  constructor(walletService: WalletService) {
    this.walletService = walletService;

    this.contractAddresses = {
      conditionalTokens: process.env.POLYMARKET_CONDITIONAL_TOKENS || POLYMARKET_CONSTANTS.CONDITIONAL_TOKENS,
      collateralToken: process.env.POLYMARKET_COLLATERAL_TOKEN || POLYMARKET_CONSTANTS.COLLATERAL_TOKEN,
      polymarketCore: POLYMARKET_CONSTANTS.PROXY_WALLET,
      proxyWallet: POLYMARKET_CONSTANTS.PROXY_WALLET
    };

    this.config = {
      baseUrl: process.env.CLOB_API_URL || POLYMARKET_CONSTANTS.CLOB_API_URL,
      chainId: parseInt(process.env.CHAIN_ID || POLYMARKET_CONSTANTS.POLYGON_CHAIN_ID.toString()),
      privateKey: process.env.PRIVATE_KEY || '',
      rpcUrl: process.env.RPC_URL || POLYMARKET_CONSTANTS.POLYGON_RPC
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLOB –∫–ª–∏–µ–Ω—Ç–∞
    this.initializeClobClient();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLOB –∫–ª–∏–µ–Ω—Ç–∞
   */
  private initializeClobClient(): void {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ CLOB –∫–ª–∏–µ–Ω—Ç–∞
      this.clobClient = new ClobClient(
        this.config.baseUrl,
        this.config.chainId,
        this.walletService.getWallet() as any
      );

      console.log('‚úÖ CLOB Client —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CLOB –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤
   */
  async getMarkets(cursor?: string): Promise<any> {
    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å —Ä—ã–Ω–∫–æ–≤: cursor=${cursor || 'initial'}`);

      const response = await this.clobClient.getMarkets(cursor);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${(response as any).results?.length || 0} —Ä—ã–Ω–∫–æ–≤`);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤
   */
  async getSimplifiedMarkets(cursor?: string): Promise<any> {
    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: cursor=${cursor || 'initial'}`);

      const response = await this.clobClient.getSimplifiedMarkets(cursor);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${(response as any).results?.length || 0} —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤`);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ –ø–æ condition ID
   */
  async getMarket(conditionId: string): Promise<any> {
    try {
      console.log(`üìà –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ: ${conditionId}`);

      const market = await this.clobClient.getMarket(conditionId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ: ${market?.question || 'N/A'}`);
      return market;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–±—É–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getOrderBook(tokenId: string): Promise<any> {
    try {
      console.log(`üìã –ó–∞–ø—Ä–æ—Å –æ—Ä–¥–µ—Ä–±—É–∫–∞: tokenId=${tokenId}`);

      const orderbook = await this.clobClient.getOrderBook(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ä–¥–µ—Ä–±—É–∫: ${orderbook?.bids?.length || 0} bids, ${orderbook?.asks?.length || 0} asks`);
      return orderbook;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–∏–∫–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getTickSize(tokenId: string): Promise<any> {
    try {
      console.log(`üìè –ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ —Ç–∏–∫–∞: tokenId=${tokenId}`);

      const tickSize = await this.clobClient.getTickSize(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–∞–∑–º–µ—Ä —Ç–∏–∫–∞: ${tickSize || 'N/A'}`);
      return tickSize;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–∏–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getFeeRate(tokenId: string): Promise<number> {
    try {
      console.log(`üí∞ –ó–∞–ø—Ä–æ—Å –∫–æ–º–∏—Å—Å–∏–∏: tokenId=${tokenId}`);

      const feeRate = await this.clobClient.getFeeRateBps(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: ${feeRate} bps`);
      return feeRate;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getMidpoint(tokenId: string): Promise<any> {
    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã: tokenId=${tokenId}`);

      const midpoint = await this.clobClient.getMidpoint(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${midpoint?.price || 'N/A'}`);
      return midpoint;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–µ–¥ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getSpread(tokenId: string): Promise<any> {
    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å —Å–ø—Ä–µ–¥–∞: tokenId=${tokenId}`);

      const spread = await this.clobClient.getSpread(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø—Ä–µ–¥: ${spread?.spread || 'N/A'}`);
      return spread;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–µ–¥–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å–¥–µ–ª–∫–∏
   */
  async getLastTradePrice(tokenId: string): Promise<any> {
    try {
      console.log(`üìä –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã —Å–¥–µ–ª–∫–∏: tokenId=${tokenId}`);

      const lastPrice = await this.clobClient.getLastTradePrice(tokenId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${lastPrice?.price || 'N/A'}`);
      return lastPrice;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
   */
  async getPriceHistory(params: any): Promise<any[]> {
    try {
      console.log(`üìà –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω: tokenId=${params.tokenID}`);

      const priceHistory = await this.clobClient.getPricesHistory(params);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${priceHistory.length} —Ç–æ—á–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω`);
      return priceHistory;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
   */
  async createOrder(params: any): Promise<any> {
    try {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞:', params);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      this.validateOrderParams(params);

      const order = await this.clobClient.createOrder(params);

      console.log(`‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${order?.id || 'N/A'}`);
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ ID
   */
  async getOrder(orderId: string): Promise<any> {
    try {
      console.log(`üìã –ó–∞–ø—Ä–æ—Å –æ—Ä–¥–µ—Ä–∞: ${orderId}`);

      const order = await this.clobClient.getOrder(orderId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ä–¥–µ—Ä: ${order?.id || 'N/A'}`);
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getOpenOrders(params?: any): Promise<any[]> {
    try {
      console.log('üìã –ó–∞–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', params);

      const response = await this.clobClient.getOpenOrders(params);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${(response as any).results?.length || 0} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`);
      return (response as any).results || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
   */
  async getTrades(params?: any): Promise<any[]> {
    try {
      console.log('üìä –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', params);

      const trades = await this.clobClient.getTrades(params);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫`);
      return trades;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ allowance –¥–ª—è —Ç–æ–∫–µ–Ω–∞
   */
  async getBalanceAndAllowance(tokenId: string): Promise<any> {
    try {
      console.log(`üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏ allowance: tokenId=${tokenId}`);

      const params = {
        tokenID: tokenId,
        owner: this.walletService.getAddress(),
        asset_type: AssetType.CONDITIONAL
      };

      const response = await this.clobClient.getBalanceAllowance(params);

      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å: ${response.balance}, Allowance: ${response.allowance}`);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ allowance:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ–ª–ª–∞—Ç–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (USDC)
   */
  async getCollateralBalance(): Promise<string> {
    try {
      const balance = await this.walletService.getTokenBalance(this.contractAddresses.collateralToken);
      return balance;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC:', error);
      throw error;
    }
  }

  /**
   * –û–¥–æ–±—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  async approveCollateral(amount: string): Promise<ethers.TransactionResponse> {
    try {
      const contract = new ethers.Contract(
        this.contractAddresses.collateralToken,
        ['function approve(address spender, uint256 amount) returns (bool)', 'function decimals() view returns (uint8)'],
        this.walletService.getWallet()
      );

      const decimals = await contract.decimals();
      const amountWei = ethers.parseUnits(amount, decimals);

      return await contract.approve(this.contractAddresses.conditionalTokens, amountWei);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è USDC:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
   */
  async getCollateralAllowance(): Promise<string> {
    try {
      const contract = new ethers.Contract(
        this.contractAddresses.collateralToken,
        ['function allowance(address owner, address spender) view returns (uint256)', 'function decimals() view returns (uint8)'],
        this.walletService.getWallet()
      );

      const allowance = await contract.allowance(
        this.walletService.getAddress(),
        this.contractAddresses.conditionalTokens
      );
      const decimals = await contract.decimals();

      return ethers.formatUnits(allowance, decimals);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ allowance:', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞
   */
  validateOrderParams(params: any): void {
    if (!params.tokenID) {
      throw new Error('tokenID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    if (!params.side || !['BUY', 'SELL'].includes(params.side)) {
      throw new Error('side –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "BUY" –∏–ª–∏ "SELL"');
    }
    if (!params.price || params.price <= 0 || params.price > 1) {
      throw new Error('price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1');
    }
    if (!params.size || params.size <= 0) {
      throw new Error('size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
   */
  getContractAddresses(): any {
    return this.contractAddresses;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é CLOB
   */
  getClobConfig(): any {
    return this.config;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CLOB API
   */
  async checkConnection(): Promise<boolean> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CLOB API...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      await this.clobClient.getOk();
      const health = true;

      console.log(`‚úÖ CLOB API –¥–æ—Å—Ç—É–ø–µ–Ω: ${health ? '–î–∞' : '–ù–µ—Ç'}`);
      return health;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
   */
  async getServerTime(): Promise<number> {
    try {
      const serverTime = await this.clobClient.getServerTime();
      console.log(`üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date(serverTime).toISOString()}`);
      return serverTime;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      throw error;
    }
  }
}