import dotenv from 'dotenv';
import { WalletService } from './services/WalletService';
import { PolymarketService } from './services/PolymarketService';
import { CreateOrderParams } from './types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

class PolymarketBot {
  private walletService: WalletService;
  private polymarketService: PolymarketService;

  constructor() {
    try {
      this.walletService = new WalletService();
      this.polymarketService = new PolymarketService(this.walletService);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
   */
  async initialize(): Promise<void> {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Polymarket Bot...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
      const isConnected = await this.walletService.checkConnection();
      if (!isConnected) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
      const networkInfo = await this.walletService.getNetworkInfo();
      console.log(`üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏: ${networkInfo.name} (Chain ID: ${networkInfo.chainId})`);

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      const walletAddress = this.walletService.getAddress();
      console.log(`üí∞ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletAddress}`);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å ETH
      const ethBalance = await this.walletService.getBalance();
      console.log(`üíé –ë–∞–ª–∞–Ω—Å ETH: ${ethBalance}`);

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDC
      const usdcBalance = await this.polymarketService.getCollateralBalance();
      console.log(`üíµ –ë–∞–ª–∞–Ω—Å USDC: ${usdcBalance}`);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
      const contractAddresses = this.polymarketService.getContractAddresses();
      console.log('üìã –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:');
      console.log(`   ConditionalTokens: ${contractAddresses.conditionalTokens}`);
      console.log(`   CollateralToken: ${contractAddresses.collateralToken}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CLOB API
      const clobConnected = await this.polymarketService.checkConnection();
      console.log(`üîó CLOB API: ${clobConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
      const serverTime = await this.polymarketService.getServerTime();
      console.log(`üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date(serverTime).toLocaleString()}`);

      console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
   */
  async getWalletInfo(): Promise<void> {
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ:');

    const address = this.walletService.getAddress();
    const ethBalance = await this.walletService.getBalance();
    const usdcBalance = await this.polymarketService.getCollateralBalance();
    const allowance = await this.polymarketService.getCollateralAllowance();

    console.log(`   –ê–¥—Ä–µ—Å: ${address}`);
    console.log(`   ETH: ${ethBalance}`);
    console.log(`   USDC: ${usdcBalance}`);
    console.log(`   Allowance: ${allowance}`);
  }

  /**
   * –û–¥–æ–±—Ä–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ USDC
   */
  async approveUSDC(amount: string): Promise<void> {
    console.log(`\nüîê –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è ${amount} USDC...`);

    try {
      const tx = await this.polymarketService.approveCollateral(amount);
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${tx.hash}`);

      const receipt = await tx.wait();
      console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–ª–æ–∫–µ: ${receipt?.blockNumber}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
   */
  async checkApprovalStatus(): Promise<void> {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è...');

    const allowance = await this.polymarketService.getCollateralAllowance();
    console.log(`   –¢–µ–∫—É—â–∏–π allowance: ${allowance} USDC`);

    if (parseFloat(allowance) > 0) {
      console.log('‚úÖ –û–¥–æ–±—Ä–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  –û–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å CLOB API
   */
  async demonstrateClobOperations(): Promise<void> {
    console.log('\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å CLOB API...');

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä—ã–Ω–∫–æ–≤
      const marketsResponse = await this.polymarketService.getMarkets();
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä—ã–Ω–∫–æ–≤: ${marketsResponse.results.length}`);

      if (marketsResponse.results.length > 0) {
        const firstMarket = marketsResponse.results[0];
        console.log(`   –ü–µ—Ä–≤—ã–π —Ä—ã–Ω–æ–∫: ${firstMarket.question}`);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        const tokenId = firstMarket.tokenIds?.[0] || firstMarket.id;
        const orderbook = await this.polymarketService.getOrderBook(tokenId);

        if (orderbook) {
          console.log(`   –û—Ä–¥–µ—Ä–±—É–∫: ${orderbook.bids.length} bids, ${orderbook.asks.length} asks`);

          // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä—ã–Ω–∫–∞
          const [tickSize, feeRate, midpoint] = await Promise.all([
            this.polymarketService.getTickSize(tokenId),
            this.polymarketService.getFeeRate(tokenId),
            this.polymarketService.getMidpoint(tokenId)
          ]);

          console.log(`   –†–∞–∑–º–µ—Ä —Ç–∏–∫–∞: ${tickSize?.tickSize || 'N/A'}`);
          console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${feeRate} bps`);
          console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${midpoint?.price || 'N/A'}`);
        }
      }

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
      const openOrders = await this.polymarketService.getOpenOrders({ limit: 5 });
      console.log(`   –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${openOrders.length}`);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
      const trades = await this.polymarketService.getTrades({ limit: 5 });
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫: ${trades.length}`);

    } catch (error) {
      console.log('   CLOB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)');
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
   */
  async demonstrateOrderPlacement(): Promise<void> {
    console.log('\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–∫–µ–Ω
      const marketsResponse = await this.polymarketService.getMarkets();
      if (marketsResponse.results.length === 0) {
        console.log('   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
        return;
      }

      const firstMarket = marketsResponse.results[0];
      const tokenId = firstMarket.tokenIds?.[0] || firstMarket.id;

      const orderParams: CreateOrderParams = {
        tokenID: tokenId,
        price: 0.5,
        size: 1000000, // 1 USDC –≤ base units
        side: 'BUY',
        orderType: 'GTC'
      };

      console.log('   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:', orderParams);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      this.polymarketService['validateOrderParams'](orderParams);
      console.log('   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω—ã');

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
      // const order = await this.polymarketService.createOrder(orderParams);
      console.log('   ‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async run(): Promise<void> {
    try {
      await this.initialize();
      await this.getWalletInfo();
      await this.checkApprovalStatus();
      await this.demonstrateClobOperations();
      await this.demonstrateOrderPlacement();

      console.log('\nüéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Polymarket');
      console.log('üìö –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã: npm run examples');

    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function main(): Promise<void> {
  const bot = new PolymarketBot();
  await bot.run();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  });
}

export { PolymarketBot };