import dotenv from 'dotenv';
import { WalletService } from './services/WalletService';
import { PolymarketService } from './services/PolymarketService';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—É–ª–µ Polymarket
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞!
 */
class RealPolymarketTest {
  private walletService: WalletService;
  private polymarketService: PolymarketService;

  constructor() {
    this.walletService = new WalletService();
    this.polymarketService = new PolymarketService(this.walletService);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async checkConnection(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
      const networkConnected = await this.walletService.checkConnection();
      console.log(`üì° –°–µ—Ç—å: ${networkConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CLOB API
      const clobConnected = await this.polymarketService.checkConnection();
      console.log(`üîó CLOB API: ${clobConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
      const serverTime = await this.polymarketService.getServerTime();
      console.log(`üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date(serverTime).toLocaleString()}`);
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ
      const address = this.walletService.getAddress();
      const ethBalance = await this.walletService.getBalance();
      const usdcBalance = await this.polymarketService.getCollateralBalance();
      
      console.log(`üí∞ –ö–æ—à–µ–ª–µ–∫: ${address}`);
      console.log(`üíé ETH: ${ethBalance}`);
      console.log(`üíµ USDC: ${usdcBalance}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
   */
  async getActiveMarkets(): Promise<any[]> {
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤...');
    
    try {
      const response = await this.polymarketService.getMarkets();
      const markets = (response as any).results || [];
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${markets.length} —Ä—ã–Ω–∫–æ–≤`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä—ã–Ω–∫–æ–≤
      markets.slice(0, 5).forEach((market: any, index: number) => {
        console.log(`${index + 1}. ${market.question}`);
        console.log(`   ID: ${market.id}`);
        console.log(`   Condition ID: ${market.conditionId}`);
        console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${market.active ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   –¢–æ–∫–µ–Ω—ã: ${market.tokenIds?.join(', ') || 'N/A'}`);
        console.log('');
      });
      
      return markets;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
   */
  async analyzeMarket(tokenId: string): Promise<void> {
    console.log(`\nüìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: ${tokenId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
      const orderbook = await this.polymarketService.getOrderBook(tokenId);
      
      if (orderbook) {
        console.log('üìã –û—Ä–¥–µ—Ä–±—É–∫:');
        console.log(`   Bids: ${orderbook.bids?.length || 0}`);
        console.log(`   Asks: ${orderbook.asks?.length || 0}`);
        
        if (orderbook.bids && orderbook.bids.length > 0) {
          console.log(`   –õ—É—á—à–∏–π bid: ${orderbook.bids[0].price} (${orderbook.bids[0].size})`);
        }
        if (orderbook.asks && orderbook.asks.length > 0) {
          console.log(`   –õ—É—á—à–∏–π ask: ${orderbook.asks[0].price} (${orderbook.asks[0].size})`);
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä—ã–Ω–∫–∞
      const [tickSize, feeRate, midpoint, spread, lastPrice] = await Promise.all([
        this.polymarketService.getTickSize(tokenId),
        this.polymarketService.getFeeRate(tokenId),
        this.polymarketService.getMidpoint(tokenId),
        this.polymarketService.getSpread(tokenId),
        this.polymarketService.getLastTradePrice(tokenId)
      ]);
      
      console.log('üìä –î–µ—Ç–∞–ª–∏ —Ä—ã–Ω–∫–∞:');
      console.log(`   –†–∞–∑–º–µ—Ä —Ç–∏–∫–∞: ${tickSize || 'N/A'}`);
      console.log(`   –ö–æ–º–∏—Å—Å–∏—è: ${feeRate} bps`);
      console.log(`   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${midpoint?.price || 'N/A'}`);
      console.log(`   –°–ø—Ä–µ–¥: ${spread?.spread || 'N/A'}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${lastPrice?.price || 'N/A'}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ allowance
   */
  async checkBalanceAndAllowance(tokenId: string): Promise<void> {
    console.log(`\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${tokenId}`);
    
    try {
      const [balance, collateralBalance, collateralAllowance] = await Promise.all([
        this.polymarketService.getBalanceAndAllowance(tokenId),
        this.polymarketService.getCollateralBalance(),
        this.polymarketService.getCollateralAllowance()
      ]);
      
      console.log('üíº –ë–∞–ª–∞–Ω—Å—ã:');
      console.log(`   –¢–æ–∫–µ–Ω ${tokenId}: ${balance.balance}`);
      console.log(`   Allowance —Ç–æ–∫–µ–Ω–∞: ${balance.allowance}`);
      console.log(`   USDC –±–∞–ª–∞–Ω—Å: ${collateralBalance}`);
      console.log(`   USDC allowance: ${collateralAllowance}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–í–ù–ò–ú–ê–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞!)
   */
  async createTestOrder(tokenId: string): Promise<void> {
    console.log(`\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: ${tokenId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ä–¥–µ—Ä–±—É–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–π —Ü–µ–Ω—ã
      const orderbook = await this.polymarketService.getOrderBook(tokenId);
      
      if (!orderbook || !orderbook.bids || orderbook.bids.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞');
        return;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –ª—É—á—à–µ–≥–æ bid –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      const bestBidPrice = parseFloat(orderbook.bids[0].price);
      const testPrice = Math.max(0.01, bestBidPrice - 0.01); // –ú–∏–Ω–∏–º—É–º 1 —Ü–µ–Ω—Ç
      
      const orderParams = {
        tokenID: tokenId,
        price: testPrice,
        size: 1000000, // 1 USDC –≤ base units
        side: 'BUY',
        orderType: 'GTC'
      };
      
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:', orderParams);
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏!');
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      this.polymarketService.validateOrderParams(orderParams);
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω—ã');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      // const order = await this.polymarketService.createOrder(orderParams);
      // console.log('‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω:', order);
      
      console.log('üîí –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      console.log('üí° –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
   */
  async getTradingHistory(): Promise<void> {
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏...');
    
    try {
      const [openOrders, trades] = await Promise.all([
        this.polymarketService.getOpenOrders({ limit: 10 }),
        this.polymarketService.getTrades({ limit: 10 })
      ]);
      
      console.log(`üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${openOrders.length}`);
      openOrders.forEach((order: any, index: number) => {
        console.log(`${index + 1}. ${order.id} - ${order.side} ${order.size} @ ${order.price}`);
      });
      
      console.log(`\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫: ${trades.length}`);
      trades.forEach((trade: any, index: number) => {
        console.log(`${index + 1}. ${trade.id} - ${trade.side} ${trade.size} @ ${trade.price}`);
        console.log(`   –í—Ä–µ–º—è: ${new Date(trade.timestamp).toLocaleString()}`);
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
   */
  async runFullTest(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞!');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      await this.checkConnection();
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤
      const markets = await this.getActiveMarkets();
      
      if (markets.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä—ã–Ω–æ–∫ —Å —Ç–æ–∫–µ–Ω–∞–º–∏
      const testMarket = markets.find((market: any) => market.tokenIds && market.tokenIds.length > 0);
      
      if (!testMarket) {
        console.log('‚ùå –ù–µ—Ç —Ä—ã–Ω–∫–æ–≤ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      const testTokenId = testMarket.tokenIds[0];
      console.log(`\nüéØ –í—ã–±—Ä–∞–Ω —Ä—ã–Ω–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${testMarket.question}`);
      console.log(`üîë –¢–æ–∫–µ–Ω ID: ${testTokenId}`);
      
      // –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
      await this.analyzeMarket(testTokenId);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      await this.checkBalanceAndAllowance(testTokenId);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      await this.createTestOrder(testTokenId);
      
      // –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
      await this.getTradingHistory();
      
      console.log('\n‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main(): Promise<void> {
  const test = new RealPolymarketTest();
  await test.runFullTest();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  });
}

export { RealPolymarketTest };
