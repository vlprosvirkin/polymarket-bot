import dotenv from 'dotenv';
import { WalletService } from './services/WalletService';
import { PolymarketService } from './services/PolymarketService';
import { CreateOrderParams } from './types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Polymarket Bot –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ CLOB API
 * https://github.com/Polymarket/clob-client
 */
class PolymarketExamples {
  private walletService: WalletService;
  private polymarketService: PolymarketService;

  constructor() {
    this.walletService = new WalletService();
    this.polymarketService = new PolymarketService(this.walletService);
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
   */
  async getActiveMarkets(): Promise<void> {
    console.log('\nüìä –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤');

    try {
      const response = await this.polymarketService.getMarkets();

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${response.results.length} —Ä—ã–Ω–∫–æ–≤:`);
      response.results.slice(0, 5).forEach((market: any, index: number) => {
        console.log(`${index + 1}. ${market.question}`);
        console.log(`   ID: ${market.id}`);
        console.log(`   Condition ID: ${market.conditionId}`);
        console.log(`   –û–±—ä–µ–º: $${market.volume || 'N/A'}`);
        console.log(`   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: $${market.liquidity || 'N/A'}`);
        console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${market.active ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log('');
      });

      console.log(`–°–ª–µ–¥—É—é—â–∏–π –∫—É—Ä—Å–æ—Ä: ${response.next_cursor}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  async getMarketOrderbook(tokenId: string): Promise<void> {
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞');

    try {
      const orderbook = await this.polymarketService.getOrderBook(tokenId);

      if (orderbook) {
        console.log(`–û—Ä–¥–µ—Ä–±—É–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenId}:`);

        console.log('\nüî¥ –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (asks):');
        orderbook.asks.slice(0, 5).forEach((ask: any, index: number) => {
          console.log(`   ${index + 1}. –¶–µ–Ω–∞: ${ask.price}, –†–∞–∑–º–µ—Ä: ${ask.size}`);
        });

        console.log('\nüü¢ –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É (bids):');
        orderbook.bids.slice(0, 5).forEach((bid: any, index: number) => {
          console.log(`   ${index + 1}. –¶–µ–Ω–∞: ${bid.price}, –†–∞–∑–º–µ—Ä: ${bid.size}`);
        });
      } else {
        console.log('–û—Ä–¥–µ—Ä–±—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ
   */
  async getMarketInfo(conditionId: string): Promise<void> {
    console.log('\nüìà –ü—Ä–∏–º–µ—Ä 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–Ω–∫–µ');

    try {
      const market = await this.polymarketService.getMarket(conditionId);

      if (market) {
        console.log(`–†—ã–Ω–æ–∫: ${market.question}`);
        console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${market.description}`);
        console.log(`–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${market.endDate}`);
        console.log(`–ò—Å—Ö–æ–¥—ã: ${market.outcomes?.join(', ')}`);
        console.log(`–ê–∫—Ç–∏–≤–µ–Ω: ${market.active ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`–ó–∞–∫—Ä—ã—Ç: ${market.closed ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: ${market.archived ? '–î–∞' : '–ù–µ—Ç'}`);
      } else {
        console.log('–†—ã–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä—ã–Ω–∫–µ:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∏–∫–∞ –∏ –∫–æ–º–∏—Å—Å–∏–∏
   */
  async getMarketDetails(tokenId: string): Promise<void> {
    console.log('\nüìè –ü—Ä–∏–º–µ—Ä 4: –î–µ—Ç–∞–ª–∏ —Ä—ã–Ω–∫–∞');

    try {
      const [tickSize, feeRate, midpoint, spread, lastPrice] = await Promise.all([
        this.polymarketService.getTickSize(tokenId),
        this.polymarketService.getFeeRate(tokenId),
        this.polymarketService.getMidpoint(tokenId),
        this.polymarketService.getSpread(tokenId),
        this.polymarketService.getLastTradePrice(tokenId)
      ]);

      console.log(`–¢–æ–∫–µ–Ω: ${tokenId}`);
      console.log(`–†–∞–∑–º–µ—Ä —Ç–∏–∫–∞: ${tickSize?.tickSize || 'N/A'}`);
      console.log(`–ö–æ–º–∏—Å—Å–∏—è: ${feeRate} bps`);
      console.log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${midpoint?.price || 'N/A'}`);
      console.log(`–°–ø—Ä–µ–¥: ${spread?.spread || 'N/A'}`);
      console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${lastPrice?.price || 'N/A'}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä—ã–Ω–∫–∞:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
   */
  async getPriceHistory(tokenId: string): Promise<void> {
    console.log('\nüìà –ü—Ä–∏–º–µ—Ä 5: –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω');

    try {
      const endTime = new Date();
      const startTime = new Date(endTime.getTime() - 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥

      const priceHistory = await this.polymarketService.getPriceHistory({
        tokenID: tokenId,
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        interval: '1h'
      });

      console.log(`–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenId}:`);
      priceHistory.slice(0, 10).forEach((price: any, index: number) => {
        console.log(`${index + 1}. ${new Date(price.timestamp).toLocaleString()}: $${price.price}`);
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ allowance
   */
  async getBalanceInfo(tokenId: string): Promise<void> {
    console.log('\nüí∞ –ü—Ä–∏–º–µ—Ä 6: –ë–∞–ª–∞–Ω—Å –∏ allowance');

    try {
      const [balance, allowance, collateralBalance] = await Promise.all([
        this.polymarketService.getBalanceAndAllowance(tokenId),
        this.polymarketService.getCollateralAllowance(),
        this.polymarketService.getCollateralBalance()
      ]);

      console.log(`–¢–æ–∫–µ–Ω: ${tokenId}`);
      console.log(`–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞: ${balance.balance}`);
      console.log(`Allowance —Ç–æ–∫–µ–Ω–∞: ${balance.allowance}`);
      console.log(`–ë–∞–ª–∞–Ω—Å USDC: ${collateralBalance}`);
      console.log(`Allowance USDC: ${allowance}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
   */
  async getOpenOrders(): Promise<void> {
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä 7: –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞');

    try {
      const orders = await this.polymarketService.getOpenOrders({ limit: 10 });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${orders.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:`);

      orders.forEach((order: any, index: number) => {
        console.log(`${index + 1}. –û—Ä–¥–µ—Ä ${order.id}`);
        console.log(`   –¢–æ–∫–µ–Ω: ${order.tokenID}`);
        console.log(`   –°—Ç–æ—Ä–æ–Ω–∞: ${order.side}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${order.size}`);
        console.log(`   –¶–µ–Ω–∞: ${order.price}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${order.status}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleString()}`);
        console.log('');
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
   */
  async getTradingHistory(): Promise<void> {
    console.log('\nüìä –ü—Ä–∏–º–µ—Ä 8: –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫');

    try {
      const trades = await this.polymarketService.getTrades({ limit: 10 });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${trades.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫:`);

      trades.forEach((trade: any, index: number) => {
        console.log(`${index + 1}. –°–¥–µ–ª–∫–∞ ${trade.id}`);
        console.log(`   –¢–æ–∫–µ–Ω: ${trade.tokenID}`);
        console.log(`   –°—Ç–æ—Ä–æ–Ω–∞: ${trade.side}`);
        console.log(`   –†–∞–∑–º–µ—Ä: ${trade.size}`);
        console.log(`   –¶–µ–Ω–∞: ${trade.price}`);
        console.log(`   Maker: ${trade.maker}`);
        console.log(`   Taker: ${trade.taker}`);
        console.log(`   –í—Ä–µ–º—è: ${new Date(trade.timestamp).toLocaleString()}`);
        console.log('');
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫:', error);
    }
  }

  /**
   * –ü—Ä–∏–º–µ—Ä 9: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)
   */
  async demonstrateOrderCreation(tokenId: string): Promise<void> {
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä 9: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)');

    try {
      const orderParams: CreateOrderParams = {
        tokenID: tokenId,
        price: 0.5,
        size: 1000000, // 1 USDC –≤ base units
        side: 'BUY',
        orderType: 'GTC'
      };

      console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:', orderParams);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      this.polymarketService['validateOrderParams'](orderParams);
      console.log('‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω—ã');

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
      // const order = await this.polymarketService.createOrder(orderParams);
      console.log('‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
   */
  async runAllExamples(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Polymarket Bot');
    console.log('–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º CLOB API: https://github.com/Polymarket/clob-client');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const isConnected = await this.polymarketService.checkConnection();
      if (!isConnected) {
        console.log('‚ùå CLOB API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
      await this.polymarketService.getServerTime();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤
      const marketsResponse = await this.polymarketService.getMarkets();
      if (marketsResponse.results.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤');
        return;
      }

      const exampleMarket = marketsResponse.results[0];
      const exampleTokenId = exampleMarket.tokenIds?.[0] || exampleMarket.id;
      const exampleConditionId = exampleMarket.conditionId || exampleMarket.id;

      console.log(`\nüìà –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—ã–Ω–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤: ${exampleMarket.question}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
      await this.getActiveMarkets();
      await this.getMarketInfo(exampleConditionId);
      await this.getMarketOrderbook(exampleTokenId);
      await this.getMarketDetails(exampleTokenId);
      await this.getPriceHistory(exampleTokenId);
      await this.getBalanceInfo(exampleTokenId);
      await this.getOpenOrders();
      await this.getTradingHistory();
      await this.demonstrateOrderCreation(exampleTokenId);

      console.log('\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
async function main(): Promise<void> {
  const examples = new PolymarketExamples();
  await examples.runAllExamples();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
  main().catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤:', error);
    process.exit(1);
  });
}

export { PolymarketExamples };